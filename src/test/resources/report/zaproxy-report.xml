<?xml version="1.0"?>
<!--
  #%L
  ZAP Plugin for SonarQube
  %%
  Copyright (C) 2015 - 2020 Gene Gotimer <eugene.gotimer@steampunk.com>
  %%
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as
  published by the Free Software Foundation, either version 3 of the
  License, or (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public
  License along with this program.  If not, see
  <http://www.gnu.org/licenses/gpl-3.0.html>.
  #L%
  -->
<OWASPZAPReport version="D-2018-03-26" generated="Thu, 3 May 2018 06:15:48">
    <site name="http://example.org" host="example.org" port="80" ssl="false"><alerts><alertitem>
        <pluginid>10010</pluginid>
        <alert>Cookie No HttpOnly Flag</alert>
        <name>Cookie No HttpOnly Flag</name>
        <riskcode>1</riskcode>
        <confidence>2</confidence>
        <riskdesc>Low (Medium)</riskdesc>
        <desc>&lt;p&gt;A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.&lt;/p&gt;</desc>
        <instances>
            <instance>
                <uri>http://example.org/localize</uri>
                <method>GET</method>
                <param>_pxCaptcha</param>
                <evidence>Set-Cookie: _pxCaptcha</evidence>
            </instance>
            <instance>
                <uri>http://example.org/support</uri>
                <method>GET</method>
                <param>_pxCaptcha</param>
                <evidence>Set-Cookie: _pxCaptcha</evidence>
            </instance>
            <instance>
                <uri>http://example.org/getting-started/clean-urls</uri>
                <method>GET</method>
                <param>_pxCaptcha</param>
                <evidence>Set-Cookie: _pxCaptcha</evidence>
            </instance>
            <instance>
                <uri>http://example.org/security-team</uri>
                <method>GET</method>
                <param>_pxCaptcha</param>
                <evidence>Set-Cookie: _pxCaptcha</evidence>
            </instance>
            <instance>
                <uri>http://example.org/node/948216</uri>
                <method>GET</method>
                <param>_pxCaptcha</param>
                <evidence>Set-Cookie: _pxCaptcha</evidence>
            </instance>
            <instance>
                <uri>http://example.org/project/drupal</uri>
                <method>GET</method>
                <param>_pxCaptcha</param>
                <evidence>Set-Cookie: _pxCaptcha</evidence>
            </instance>
            <instance>
                <uri>http://example.org/update/theme</uri>
                <method>GET</method>
                <param>_pxCaptcha</param>
                <evidence>Set-Cookie: _pxCaptcha</evidence>
            </instance>
            <instance>
                <uri>http://example.org/cron,</uri>
                <method>GET</method>
                <param>_pxCaptcha</param>
                <evidence>Set-Cookie: _pxCaptcha</evidence>
            </instance>
            <instance>
                <uri>http://example.org/requirements</uri>
                <method>GET</method>
                <param>_pxCaptcha</param>
                <evidence>Set-Cookie: _pxCaptcha</evidence>
            </instance>
            <instance>
                <uri>http://example.org/node/3854</uri>
                <method>GET</method>
                <param>_pxCaptcha</param>
                <evidence>Set-Cookie: _pxCaptcha</evidence>
            </instance>
            <instance>
                <uri>http://example.org/documentation/theme</uri>
                <method>GET</method>
                <param>_pxCaptcha</param>
                <evidence>Set-Cookie: _pxCaptcha</evidence>
            </instance>
            <instance>
                <uri>http://example.org/developing/modules.</uri>
                <method>GET</method>
                <param>_pxCaptcha</param>
                <evidence>Set-Cookie: _pxCaptcha</evidence>
            </instance>
            <instance>
                <uri>http://example.org/files/projects/drupal-x.y.tar.gz</uri>
                <method>GET</method>
                <param>_pxCaptcha</param>
                <evidence>Set-Cookie: _pxCaptcha</evidence>
            </instance>
            <instance>
                <uri>http://example.org/update/modules</uri>
                <method>GET</method>
                <param>_pxCaptcha</param>
                <evidence>Set-Cookie: _pxCaptcha</evidence>
            </instance>
            <instance>
                <uri>http://example.org/security</uri>
                <method>GET</method>
                <param>_pxCaptcha</param>
                <evidence>Set-Cookie: _pxCaptcha</evidence>
            </instance>
            <instance>
                <uri>http://example.org/node/157602</uri>
                <method>GET</method>
                <param>_pxCaptcha</param>
                <evidence>Set-Cookie: _pxCaptcha</evidence>
            </instance>
            <instance>
                <uri>http://example.org/upgrade/backing-up-the-db</uri>
                <method>GET</method>
                <param>_pxCaptcha</param>
                <evidence>Set-Cookie: _pxCaptcha</evidence>
            </instance>
            <instance>
                <uri>http://example.org/getting-started/7/admin</uri>
                <method>GET</method>
                <param>_pxCaptcha</param>
                <evidence>Set-Cookie: _pxCaptcha</evidence>
            </instance>
            <instance>
                <uri>http://example.org/project/modules</uri>
                <method>GET</method>
                <param>_pxCaptcha</param>
                <evidence>Set-Cookie: _pxCaptcha</evidence>
            </instance>
            <instance>
                <uri>http://example.org/upgrade</uri>
                <method>GET</method>
                <param>_pxCaptcha</param>
                <evidence>Set-Cookie: _pxCaptcha</evidence>
            </instance>
        </instances>
        <count>28</count>
        <solution>&lt;p&gt;Ensure that the HttpOnly flag is set for all cookies.&lt;/p&gt;</solution>
        <reference>&lt;p&gt;http://www.owasp.org/index.php/HttpOnly&lt;/p&gt;</reference>
        <cweid>16</cweid>
        <wascid>13</wascid>
        <sourceid>3</sourceid>
    </alertitem>
    </alerts></site><site name="https://example3.org" host="example3.org" port="443" ssl="true"><alerts><alertitem>
    <pluginid>90011</pluginid>
    <alert>Charset Mismatch </alert>
    <name>Charset Mismatch </name>
    <riskcode>0</riskcode>
    <confidence>1</confidence>
    <riskdesc>Informational (Low)</riskdesc>
    <desc>&lt;p&gt;This check identifies responses where the HTTP Content-Type header declares a charset different from the charset defined by the body of the HTML or XML. When there&apos;s a charset mismatch between the HTTP header and content body Web browsers can be forced into an undesirable content-sniffing mode to determine the content&apos;s correct character set.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;An attacker could manipulate content on the page to be interpreted in an encoding of their choice. For example, if an attacker can control content at the beginning of the page, they could inject script using UTF-7 encoded text and manipulate some browsers into interpreting that text.&lt;/p&gt;</desc>
    <instances>
        <instance>
            <uri>https://example3.org</uri>
            <method>GET</method>
        </instance>
    </instances>
    <count>1</count>
    <solution>&lt;p&gt;Force UTF-8 for all text content in both the HTTP header and meta tags in HTML or encoding declarations in XML.&lt;/p&gt;</solution>
    <otherinfo>&lt;p&gt;There was a charset mismatch between the HTTP Header and the XML encoding declaration: [utf-8] and [null] do not match.&lt;/p&gt;</otherinfo>
    <reference>&lt;p&gt;http://code.google.com/p/browsersec/wiki/Part2#Character_set_handling_and_detection&lt;/p&gt;</reference>
    <cweid>16</cweid>
    <wascid>15</wascid>
    <sourceid>3</sourceid>
</alertitem>
    <alertitem>
        <pluginid>10015</pluginid>
        <alert>Incomplete or No Cache-control and Pragma HTTP Header Set</alert>
        <name>Incomplete or No Cache-control and Pragma HTTP Header Set</name>
        <riskcode>1</riskcode>
        <confidence>2</confidence>
        <riskdesc>Low (Medium)</riskdesc>
        <desc>&lt;p&gt;The cache-control and pragma HTTP header have not been set properly or are missing allowing the browser and proxies to cache content.&lt;/p&gt;</desc>
        <instances>
            <instance>
                <uri>https://example3.org</uri>
                <method>GET</method>
                <param>Cache-Control</param>
                <evidence>public, max-age=90</evidence>
            </instance>
        </instances>
        <count>1</count>
        <solution>&lt;p&gt;Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate; and that the pragma HTTP header is set with no-cache.&lt;/p&gt;</solution>
        <reference>&lt;p&gt;https://example2.org</reference>
        <cweid>525</cweid>
        <wascid>13</wascid>
        <sourceid>3</sourceid>
    </alertitem>
</alerts></site><site name="https://example4.org" host="example4.org" port="443" ssl="true"><alerts><alertitem>
    <pluginid>10021</pluginid>
    <alert>X-Content-Type-Options Header Missing</alert>
    <name>X-Content-Type-Options Header Missing</name>
    <riskcode>1</riskcode>
    <confidence>2</confidence>
    <riskdesc>Low (Medium)</riskdesc>
    <desc>&lt;p&gt;The Anti-MIME-Sniffing header X-Content-Type-Options was not set to &apos;nosniff&apos;. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.&lt;/p&gt;</desc>
    <instances>
        <instance>
            <uri>https://example4.org</uri>
            <method>GET</method>
            <param>X-Content-Type-Options</param>
        </instance>
        <instance>
            <uri>https://example4.org</uri>
            <method>GET</method>
            <param>X-Content-Type-Options</param>
        </instance>
    </instances>
    <count>2</count>
    <solution>&lt;p&gt;Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to &apos;nosniff&apos; for all web pages.&lt;/p&gt;&lt;p&gt;If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.&lt;/p&gt;</solution>
    <otherinfo>&lt;p&gt;This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.&lt;/p&gt;&lt;p&gt;At &quot;High&quot; threshold this scanner will not alert on client or server error responses.&lt;/p&gt;</otherinfo>
    <reference>&lt;p&gt;http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx&lt;/p&gt;&lt;p&gt;https://example2.org</reference>
    <cweid>16</cweid>
    <wascid>15</wascid>
    <sourceid>3</sourceid>
</alertitem>
</alerts></site><site name="https://example5.org" host="example5.org" port="443" ssl="true"><alerts><alertitem>
    <pluginid>10021</pluginid>
    <alert>X-Content-Type-Options Header Missing</alert>
    <name>X-Content-Type-Options Header Missing</name>
    <riskcode>1</riskcode>
    <confidence>2</confidence>
    <riskdesc>Low (Medium)</riskdesc>
    <desc>&lt;p&gt;The Anti-MIME-Sniffing header X-Content-Type-Options was not set to &apos;nosniff&apos;. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.&lt;/p&gt;</desc>
    <instances>
        <instance>
            <uri>https://example5.org</uri>
            <method>POST</method>
            <param>X-Content-Type-Options</param>
        </instance>
    </instances>
    <count>1</count>
    <solution>&lt;p&gt;Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to &apos;nosniff&apos; for all web pages.&lt;/p&gt;&lt;p&gt;If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.&lt;/p&gt;</solution>
    <otherinfo>&lt;p&gt;This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.&lt;/p&gt;&lt;p&gt;At &quot;High&quot; threshold this scanner will not alert on client or server error responses.&lt;/p&gt;</otherinfo>
    <reference>&lt;p&gt;http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx&lt;/p&gt;&lt;p&gt;https://example2.org</reference>
    <cweid>16</cweid>
    <wascid>15</wascid>
    <sourceid>3</sourceid>
</alertitem>
</alerts></site><site name="https://example6.org" host="example6.org" port="443" ssl="true"><alerts><alertitem>
    <pluginid>10021</pluginid>
    <alert>X-Content-Type-Options Header Missing</alert>
    <name>X-Content-Type-Options Header Missing</name>
    <riskcode>1</riskcode>
    <confidence>2</confidence>
    <riskdesc>Low (Medium)</riskdesc>
    <desc>&lt;p&gt;The Anti-MIME-Sniffing header X-Content-Type-Options was not set to &apos;nosniff&apos;. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.&lt;/p&gt;</desc>
    <instances>
        <instance>
            <uri>https://example6.org</uri>
            <method>GET</method>
            <param>X-Content-Type-Options</param>
        </instance>
    </instances>
    <count>1</count>
    <solution>&lt;p&gt;Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to &apos;nosniff&apos; for all web pages.&lt;/p&gt;&lt;p&gt;If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.&lt;/p&gt;</solution>
    <otherinfo>&lt;p&gt;This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.&lt;/p&gt;&lt;p&gt;At &quot;High&quot; threshold this scanner will not alert on client or server error responses.&lt;/p&gt;</otherinfo>
    <reference>&lt;p&gt;http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx&lt;/p&gt;&lt;p&gt;https://example2.org</reference>
    <cweid>16</cweid>
    <wascid>15</wascid>
    <sourceid>3</sourceid>
</alertitem>
    <alertitem>
        <pluginid>10015</pluginid>
        <alert>Incomplete or No Cache-control and Pragma HTTP Header Set</alert>
        <name>Incomplete or No Cache-control and Pragma HTTP Header Set</name>
        <riskcode>1</riskcode>
        <confidence>2</confidence>
        <riskdesc>Low (Medium)</riskdesc>
        <desc>&lt;p&gt;The cache-control and pragma HTTP header have not been set properly or are missing allowing the browser and proxies to cache content.&lt;/p&gt;</desc>
        <instances>
            <instance>
                <uri>https://example6.org</uri>
                <method>GET</method>
                <param>Cache-Control</param>
                <evidence>public, max-age=30672000</evidence>
            </instance>
        </instances>
        <count>1</count>
        <solution>&lt;p&gt;Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate; and that the pragma HTTP header is set with no-cache.&lt;/p&gt;</solution>
        <reference>&lt;p&gt;https://example2.org</reference>
        <cweid>525</cweid>
        <wascid>13</wascid>
        <sourceid>3</sourceid>
    </alertitem>
    <alertitem>
        <pluginid>10025</pluginid>
        <alert>Information Disclosure - Sensitive Information in HTTP Referrer Header</alert>
        <name>Information Disclosure - Sensitive Information in HTTP Referrer Header</name>
        <riskcode>0</riskcode>
        <confidence>2</confidence>
        <riskdesc>Informational (Medium)</riskdesc>
        <desc>&lt;p&gt;The HTTP header may have leaked a potentially sensitive parameter to another domain. This can violate PCI and most organizational compliance policies. You can configure the list of strings for this check to add or remove values specific to your environment.&lt;/p&gt;</desc>
        <instances>
            <instance>
                <uri>https://example6.org</uri>
                <method>GET</method>
                <evidence>user</evidence>
            </instance>
        </instances>
        <count>1</count>
        <solution>&lt;p&gt;Do not pass sensitive information in URIs.&lt;/p&gt;</solution>
        <otherinfo>&lt;p&gt;The URL in the HTTP referrer header field appears to contain sensitive information.&lt;/p&gt;</otherinfo>
        <reference>&lt;p&gt;&lt;/p&gt;</reference>
        <cweid>200</cweid>
        <wascid>13</wascid>
        <sourceid>3</sourceid>
    </alertitem>
</alerts></site><site name="http://testsite" host="testsite" port="80" ssl="false"><alerts><alertitem>
    <pluginid>10016</pluginid>
    <alert>Web Browser XSS Protection Not Enabled</alert>
    <name>Web Browser XSS Protection Not Enabled</name>
    <riskcode>1</riskcode>
    <confidence>2</confidence>
    <riskdesc>Low (Medium)</riskdesc>
    <desc>&lt;p&gt;Web Browser XSS Protection is not enabled, or is disabled by the configuration of the &apos;X-XSS-Protection&apos; HTTP response header on the web server&lt;/p&gt;</desc>
    <instances>
        <instance>
            <uri>http://testsite/users/drupal-dast-cdn/assets/drupal-dast-cdn/assets/favicon/favicon-32x32.png</uri>
            <method>GET</method>
            <param>X-XSS-Protection</param>
        </instance>
        <instance>
            <uri>http://testsite/users/drupal-dast-cdn/assets/svg/drupal-dast-cdn/assets/favicon/apple-icon-152x152.png</uri>
            <method>GET</method>
            <param>X-XSS-Protection</param>
        </instance>
        <instance>
            <uri>http://testsite/users/drupal-dast-cdn/assets/svg/logo/drupal-dast-cdn/assets/favicon/apple-icon-76x76.png</uri>
            <method>GET</method>
            <param>X-XSS-Protection</param>
        </instance>
        <instance>
            <uri>http://testsite/sites/all/modules/contrib/jquery_update/replace/jquery.form/</uri>
            <method>GET</method>
            <param>X-XSS-Protection</param>
        </instance>
        <instance>
            <uri>http://testsite/user/drupal-dast-cdn/drupal-dast-cdn/assets/favicon/apple-icon-57x57.png</uri>
            <method>GET</method>
            <param>X-XSS-Protection</param>
        </instance>
        <instance>
            <uri>http://testsite/misc/drupal-dast-cdn/assets/favicon/drupal-dast-cdn/assets/svg/logo/logo.svg</uri>
            <method>GET</method>
            <param>X-XSS-Protection</param>
        </instance>
        <instance>
            <uri>http://testsite/xmlrpc.php</uri>
            <method>GET</method>
            <param>X-XSS-Protection</param>
        </instance>
        <instance>
            <uri>http://testsite/user/drupal-dast-cdn/drupal-dast-cdn/assets/favicon/manifest.json</uri>
            <method>GET</method>
            <param>X-XSS-Protection</param>
        </instance>
        <instance>
            <uri>http://testsite/profiles/drupal-dast-cdn/assets/favicon/apple-icon-76x76.png</uri>
            <method>GET</method>
            <param>X-XSS-Protection</param>
        </instance>
        <instance>
            <uri>http://testsite/user/register/drupal-dast-cdn/assets/favicon/apple-icon-144x144.png</uri>
            <method>GET</method>
            <param>X-XSS-Protection</param>
        </instance>
        <instance>
            <uri>http://testsite/drupal-dast-cdn/assets/svg/logo/drupal-dast-cdn/assets/svg/logo/logo-footer.svg</uri>
            <method>GET</method>
            <param>X-XSS-Protection</param>
        </instance>
        <instance>
            <uri>http://testsite/sites/default/files/drupal-dast-cdn/assets/favicon/drupal-dast-cdn/assets/favicon/manifest.json</uri>
            <method>GET</method>
            <param>X-XSS-Protection</param>
        </instance>
        <instance>
            <uri>http://testsite/user/login/drupal-dast-cdn/assets/favicon/apple-icon-76x76.png</uri>
            <method>GET</method>
            <param>X-XSS-Protection</param>
        </instance>
        <instance>
            <uri>http://testsite/drupal-dast-cdn/assets/favicon/apple-icon.png</uri>
            <method>GET</method>
            <param>X-XSS-Protection</param>
        </instance>
        <instance>
            <uri>http://testsite/themes/drupal-dast-cdn/assets/favicon/apple-icon-72x72.png</uri>
            <method>GET</method>
            <param>X-XSS-Protection</param>
        </instance>
        <instance>
            <uri>http://testsite/user/drupal-dast-cdn/assets/svg/drupal-dast-cdn/assets/favicon/drupal-dast-cdn/assets/favicon/apple-icon-180x180.png</uri>
            <method>GET</method>
            <param>X-XSS-Protection</param>
        </instance>
        <instance>
            <uri>http://testsite/user/drupal-dast-cdn/assets/svg/drupal-dast-cdn/assets/svg/logo/logo.svg</uri>
            <method>GET</method>
            <param>X-XSS-Protection</param>
        </instance>
        <instance>
            <uri>http://testsite/users/admin</uri>
            <method>GET</method>
            <param>X-XSS-Protection</param>
        </instance>
        <instance>
            <uri>http://testsite/user/drupal-dast-cdn/drupal-dast-cdn/assets/favicon/drupal-dast-cdn/assets/favicon/apple-icon-72x72.png</uri>
            <method>GET</method>
            <param>X-XSS-Protection</param>
        </instance>
        <instance>
            <uri>http://testsite/modules/field/</uri>
            <method>GET</method>
            <param>X-XSS-Protection</param>
        </instance>
    </instances>
    <count>840</count>
    <solution>&lt;p&gt;Ensure that the web browser&apos;s XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to &apos;1&apos;.&lt;/p&gt;</solution>
    <otherinfo>&lt;p&gt;The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser&apos;s XSS protection mechanism. The following values would attempt to enable it: &lt;/p&gt;&lt;p&gt;X-XSS-Protection: 1; mode=block&lt;/p&gt;&lt;p&gt;X-XSS-Protection: 1; report=http://www.example.com/xss&lt;/p&gt;&lt;p&gt;The following values would disable it:&lt;/p&gt;&lt;p&gt;X-XSS-Protection: 0&lt;/p&gt;&lt;p&gt;The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).&lt;/p&gt;&lt;p&gt;Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).&lt;/p&gt;</otherinfo>
    <reference>&lt;p&gt;https://example2.org</reference>
    <cweid>933</cweid>
    <wascid>14</wascid>
    <sourceid>3</sourceid>
</alertitem>
    <alertitem>
        <pluginid>10027</pluginid>
        <alert>Information Disclosure - Suspicious Comments</alert>
        <name>Information Disclosure - Suspicious Comments</name>
        <riskcode>0</riskcode>
        <confidence>2</confidence>
        <riskdesc>Informational (Medium)</riskdesc>
        <desc>&lt;p&gt;The response appears to contain suspicious comments which may help an attacker.&lt;/p&gt;</desc>
        <instances>
            <instance>
                <uri>http://testsite/sites/default/files/drupal-dast-cdn/assets/favicon/drupal-dast-cdn/assets/svg/logo/logo-footer.svg</uri>
                <method>GET</method>
            </instance>
            <instance>
                <uri>http://testsite/sites/default/files/styles/themecard/public/drupal-dast-cdn/assets/favicon/favicon.ico</uri>
                <method>GET</method>
            </instance>
            <instance>
                <uri>http://testsite/user/login/drupal-dast-cdn/assets/favicon/favicon.ico</uri>
                <method>GET</method>
            </instance>
            <instance>
                <uri>http://testsite/user/drupal-dast-cdn/assets/svg/logo/logo.svg</uri>
                <method>GET</method>
            </instance>
            <instance>
                <uri>http://testsite/sites/all/modules/contrib/views/js/base.js?p5a3zr</uri>
                <method>GET</method>
            </instance>
            <instance>
                <uri>http://testsite/user/login/drupal-dast-cdn/assets/favicon/apple-icon-72x72.png</uri>
                <method>GET</method>
            </instance>
            <instance>
                <uri>http://testsite/misc/jquery.js?v=1.4.4</uri>
                <method>GET</method>
            </instance>
            <instance>
                <uri>http://testsite/sites/default/files/styles/themecard/public/drupal-dast-cdn/assets/favicon/favicon-96x96.png</uri>
                <method>GET</method>
            </instance>
            <instance>
                <uri>http://testsite/themes/drupal-dast-cdn/assets/favicon/manifest.json</uri>
                <method>GET</method>
            </instance>
            <instance>
                <uri>http://testsite/user/password/drupal-dast-cdn/assets/favicon/favicon-32x32.png</uri>
                <method>GET</method>
            </instance>
            <instance>
                <uri>http://testsite/user/password/drupal-dast-cdn/assets/favicon/favicon.ico</uri>
                <method>GET</method>
            </instance>
            <instance>
                <uri>http://testsite/user/password/drupal-dast-cdn/assets/favicon/apple-icon-76x76.png</uri>
                <method>GET</method>
            </instance>
            <instance>
                <uri>http://testsite/users/drupal-dast-cdn</uri>
                <method>GET</method>
            </instance>
            <instance>
                <uri>http://testsite/admin/drupal-dast-cdn/assets/favicon/apple-icon-120x120.png</uri>
                <method>GET</method>
            </instance>
            <instance>
                <uri>http://testsite/user/login/drupal-dast-cdn/assets/favicon/apple-icon-76x76.png</uri>
                <method>GET</method>
            </instance>
            <instance>
                <uri>http://testsite/inloggen</uri>
                <method>GET</method>
            </instance>
            <instance>
                <uri>http://testsite/user/password/drupal-dast-cdn/assets/favicon/manifest.json</uri>
                <method>GET</method>
            </instance>
            <instance>
                <uri>http://testsite/comment/reply/</uri>
                <method>GET</method>
            </instance>
            <instance>
                <uri>http://testsite/user/login/</uri>
                <method>POST</method>
            </instance>
            <instance>
                <uri>http://testsite/404-pagina-niet-gevonden</uri>
                <method>GET</method>
            </instance>
        </instances>
        <count>306</count>
        <solution>&lt;p&gt;Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.&lt;/p&gt;</solution>
        <otherinfo>&lt;p&gt;&lt;!-- TODO: Add ARIA roles - see example in header.tpl.php --&gt;&lt;/p&gt;&lt;p&gt;&lt;script type=&quot;text/javascript&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;!--//--&gt;&lt;![CDATA[//&gt;&lt;!--&lt;/p&gt;&lt;p&gt;jQuery.extend(Drupal.settings, {&quot;basePath&quot;:&quot;\/&quot;,&quot;pathPrefix&quot;:&quot;&quot;,&quot;ajaxPageState&quot;:{&quot;theme&quot;:&quot;whitelabel&quot;,&quot;theme_token&quot;:&quot;vW3qeURAE3ivzne7RDhmCB-MX1Slgfvdv4G4DvfMyTM&quot;,&quot;jquery_version&quot;:&quot;2.2&quot;,&quot;js&quot;:{&quot;sites\/all\/modules\/contrib\/jquery_update\/replace\/jquery\/2.2\/jquery.min.js&quot;:1,&quot;misc\/jquery.once.js&quot;:1,&quot;misc\/drupal.js&quot;:1,&quot;sites\/all\/modules\/contrib\/jquery_update\/replace\/ui\/external\/jquery.cookie.js&quot;:1,&quot;sites\/all\/modules\/contrib\/jquery_update\/replace\/jquery.form\/4\/jquery.form.min.js&quot;:1,&quot;misc\/ajax.js&quot;:1,&quot;sites\/all\/modules\/contrib\/jquery_update\/js\/jquery_update.js&quot;:1,&quot;sites\/all\/modules\/contrib\/ctools\/js\/auto-submit.js&quot;:1,&quot;sites\/all\/modules\/contrib\/views\/js\/base.js&quot;:1,&quot;misc\/progress.js&quot;:1,&quot;sites\/all\/modules\/contrib\/views\/js\/ajax_view.js&quot;:1,&quot;sites\/all\/themes\/whitelabel\/js\/components.js&quot;:1},&quot;css&quot;:{&quot;modules\/system\/system.messages.css&quot;:1,&quot;sites\/all\/modules\/tkp_legacy\/demo_login\/style\/demo_login.css&quot;:1,&quot;modules\/field\/theme\/field.css&quot;:1,&quot;modules\/node\/node.css&quot;:1,&quot;modules\/user\/user.css&quot;:1,&quot;sites\/all\/modules\/contrib\/views\/css\/views.css&quot;:1,&quot;sites\/all\/modules\/contrib\/ckeditor\/css\/ckeditor.css&quot;:1,&quot;sites\/all\/modules\/contrib\/media\/modules\/media_wysiwyg\/css\/media_wysiwyg.base.css&quot;:1,&quot;sites\/all\/modules\/contrib\/ctools\/css\/ctools.css&quot;:1}},&quot;urlIsAjaxTrusted&quot;:{&quot;\/&quot;:true,&quot;\/views\/ajax&quot;:true},&quot;views&quot;:{&quot;ajax_path&quot;:&quot;\/views\/ajax&quot;,&quot;ajaxViews&quot;:{&quot;views_dom_id:f2bb4d79020da034afcf982945205b53&quot;:{&quot;view_name&quot;:&quot;zoeken&quot;,&quot;view_display_id&quot;:&quot;block&quot;,&quot;view_args&quot;:&quot;&quot;,&quot;view_path&quot;:&quot;node\/99&quot;,&quot;view_base_path&quot;:null,&quot;view_dom_id&quot;:&quot;f2bb4d79020da034afcf982945205b53&quot;,&quot;pager_element&quot;:0}}}});&lt;/p&gt;&lt;p&gt;//--&gt;&lt;!]]&gt;&lt;/p&gt;&lt;p&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</otherinfo>
        <reference>&lt;p&gt;&lt;/p&gt;</reference>
        <cweid>200</cweid>
        <wascid>13</wascid>
        <sourceid>3</sourceid>
    </alertitem>
    <alertitem>
        <pluginid>10202</pluginid>
        <alert>Absence of Anti-CSRF Tokens</alert>
        <name>Absence of Anti-CSRF Tokens</name>
        <riskcode>1</riskcode>
        <confidence>2</confidence>
        <riskdesc>Low (Medium)</riskdesc>
        <desc>&lt;p&gt;No Anti-CSRF tokens were found in a HTML submission form.&lt;/p&gt;&lt;p&gt;A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;CSRF attacks are effective in a number of situations, including:&lt;/p&gt;&lt;p&gt;    * The victim has an active session on the target site.&lt;/p&gt;&lt;p&gt;    * The victim is authenticated via HTTP auth on the target site.&lt;/p&gt;&lt;p&gt;    * The victim is on the same local network as the target site.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;CSRF has primarily been used to perform an action against a target site using the victim&apos;s privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.&lt;/p&gt;</desc>
        <instances>
            <instance>
                <uri>http://testsite/search/drupal-dast-cdn/assets/svg/logo/logo.svg</uri>
                <method>GET</method>
                <evidence>&lt;form class=&quot;ctools-auto-submit-full-form&quot; action=&quot;/&quot; method=&quot;get&quot; id=&quot;views-exposed-form-zoeken-block&quot; accept-charset=&quot;UTF-8&quot;&gt;</evidence>
            </instance>
            <instance>
                <uri>http://testsite/user/login/</uri>
                <method>POST</method>
                <evidence>&lt;form action=&quot;/user/login/&quot; method=&quot;post&quot; id=&quot;user-login&quot; accept-charset=&quot;UTF-8&quot;&gt;</evidence>
            </instance>
            <instance>
                <uri>http://testsite/sites/default/files/styles/themecard/public/drupal-dast-cdn/assets/favicon/apple-icon-120x120.png</uri>
                <method>GET</method>
                <evidence>&lt;form class=&quot;ctools-auto-submit-full-form&quot; action=&quot;/&quot; method=&quot;get&quot; id=&quot;views-exposed-form-zoeken-block&quot; accept-charset=&quot;UTF-8&quot;&gt;</evidence>
            </instance>
            <instance>
                <uri>http://testsite/sites/default/files/styles/themecard/public/Pensioen%20en%20gezin.jpg?itok=0ce1BDK5</uri>
                <method>GET</method>
                <evidence>&lt;form class=&quot;ctools-auto-submit-full-form&quot; action=&quot;/&quot; method=&quot;get&quot; id=&quot;views-exposed-form-zoeken-block&quot; accept-charset=&quot;UTF-8&quot;&gt;</evidence>
            </instance>
            <instance>
                <uri>http://testsite/user/register/</uri>
                <method>GET</method>
                <evidence>&lt;form class=&quot;ctools-auto-submit-full-form&quot; action=&quot;/&quot; method=&quot;get&quot; id=&quot;views-exposed-form-zoeken-block&quot; accept-charset=&quot;UTF-8&quot;&gt;</evidence>
            </instance>
            <instance>
                <uri>http://testsite/node/add/drupal-dast-cdn/assets/favicon/favicon-32x32.png</uri>
                <method>GET</method>
                <evidence>&lt;form class=&quot;ctools-auto-submit-full-form&quot; action=&quot;/&quot; method=&quot;get&quot; id=&quot;views-exposed-form-zoeken-block&quot; accept-charset=&quot;UTF-8&quot;&gt;</evidence>
            </instance>
            <instance>
                <uri>http://testsite/user/register/drupal-dast-cdn/assets/favicon/apple-icon-180x180.png</uri>
                <method>GET</method>
                <evidence>&lt;form class=&quot;ctools-auto-submit-full-form&quot; action=&quot;/&quot; method=&quot;get&quot; id=&quot;views-exposed-form-zoeken-block&quot; accept-charset=&quot;UTF-8&quot;&gt;</evidence>
            </instance>
            <instance>
                <uri>http://testsite/user/login</uri>
                <method>GET</method>
                <evidence>&lt;form class=&quot;ctools-auto-submit-full-form&quot; action=&quot;/&quot; method=&quot;get&quot; id=&quot;views-exposed-form-zoeken-block&quot; accept-charset=&quot;UTF-8&quot;&gt;</evidence>
            </instance>
            <instance>
                <uri>http://testsite/user/drupal-dast-cdn/drupal-dast-cdn/assets/svg/logo/logo.svg</uri>
                <method>GET</method>
                <evidence>&lt;form class=&quot;ctools-auto-submit-full-form&quot; action=&quot;/&quot; method=&quot;get&quot; id=&quot;views-exposed-form-zoeken-block&quot; accept-charset=&quot;UTF-8&quot;&gt;</evidence>
            </instance>
            <instance>
                <uri>http://testsite/sites/default/files/styles/themecard/public/drupal-dast-cdn/assets/favicon/favicon-16x16.png</uri>
                <method>GET</method>
                <evidence>&lt;form class=&quot;ctools-auto-submit-full-form&quot; action=&quot;/&quot; method=&quot;get&quot; id=&quot;views-exposed-form-zoeken-block&quot; accept-charset=&quot;UTF-8&quot;&gt;</evidence>
            </instance>
            <instance>
                <uri>http://testsite/sites/default/files/styles/themecard/public/drupal-dast-cdn/assets/favicon/apple-icon-72x72.png</uri>
                <method>GET</method>
                <evidence>&lt;form class=&quot;ctools-auto-submit-full-form&quot; action=&quot;/&quot; method=&quot;get&quot; id=&quot;views-exposed-form-zoeken-block&quot; accept-charset=&quot;UTF-8&quot;&gt;</evidence>
            </instance>
            <instance>
                <uri>http://testsite/user/login/drupal-dast-cdn/assets/favicon/apple-icon.png</uri>
                <method>GET</method>
                <evidence>&lt;form action=&quot;/user/login/drupal-dast-cdn/assets/favicon/apple-icon.png&quot; method=&quot;post&quot; id=&quot;user-login&quot; accept-charset=&quot;UTF-8&quot;&gt;</evidence>
            </instance>
            <instance>
                <uri>http://testsite/admin/drupal-dast-cdn/assets/favicon/apple-icon-180x180.png</uri>
                <method>GET</method>
                <evidence>&lt;form class=&quot;ctools-auto-submit-full-form&quot; action=&quot;/&quot; method=&quot;get&quot; id=&quot;views-exposed-form-zoeken-block&quot; accept-charset=&quot;UTF-8&quot;&gt;</evidence>
            </instance>
            <instance>
                <uri>http://testsite/comment/reply/drupal-dast-cdn/assets/svg/logo/logo-footer.svg</uri>
                <method>GET</method>
                <evidence>&lt;form class=&quot;ctools-auto-submit-full-form&quot; action=&quot;/&quot; method=&quot;get&quot; id=&quot;views-exposed-form-zoeken-block&quot; accept-charset=&quot;UTF-8&quot;&gt;</evidence>
            </instance>
            <instance>
                <uri>http://testsite/user/drupal-dast-cdn/assets/svg/logo</uri>
                <method>GET</method>
                <evidence>&lt;form class=&quot;ctools-auto-submit-full-form&quot; action=&quot;/&quot; method=&quot;get&quot; id=&quot;views-exposed-form-zoeken-block&quot; accept-charset=&quot;UTF-8&quot;&gt;</evidence>
            </instance>
            <instance>
                <uri>http://testsite/node/add/drupal-dast-cdn/assets/favicon/favicon-16x16.png</uri>
                <method>GET</method>
                <evidence>&lt;form class=&quot;ctools-auto-submit-full-form&quot; action=&quot;/&quot; method=&quot;get&quot; id=&quot;views-exposed-form-zoeken-block&quot; accept-charset=&quot;UTF-8&quot;&gt;</evidence>
            </instance>
            <instance>
                <uri>http://testsite/user/register/drupal-dast-cdn/assets/favicon/apple-icon-76x76.png</uri>
                <method>GET</method>
                <evidence>&lt;form class=&quot;ctools-auto-submit-full-form&quot; action=&quot;/&quot; method=&quot;get&quot; id=&quot;views-exposed-form-zoeken-block&quot; accept-charset=&quot;UTF-8&quot;&gt;</evidence>
            </instance>
            <instance>
                <uri>http://testsite/sites/default/files/drupal-dast-cdn/assets/svg/logo/logo-footer.svg</uri>
                <method>GET</method>
                <evidence>&lt;form class=&quot;ctools-auto-submit-full-form&quot; action=&quot;/&quot; method=&quot;get&quot; id=&quot;views-exposed-form-zoeken-block&quot; accept-charset=&quot;UTF-8&quot;&gt;</evidence>
            </instance>
            <instance>
                <uri>http://testsite/user/register</uri>
                <method>POST</method>
                <evidence>&lt;form class=&quot;user-info-from-cookie&quot; enctype=&quot;multipart/form-data&quot; action=&quot;/user/register&quot; method=&quot;post&quot; id=&quot;user-register-form&quot; accept-charset=&quot;UTF-8&quot;&gt;</evidence>
            </instance>
            <instance>
                <uri>http://testsite/drupal-dast-cdn/assets/svg/logo/logo-footer.svg</uri>
                <method>GET</method>
                <evidence>&lt;form class=&quot;ctools-auto-submit-full-form&quot; action=&quot;/&quot; method=&quot;get&quot; id=&quot;views-exposed-form-zoeken-block&quot; accept-charset=&quot;UTF-8&quot;&gt;</evidence>
            </instance>
        </instances>
        <count>352</count>
        <solution>&lt;p&gt;Phase: Architecture and Design&lt;/p&gt;&lt;p&gt;Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.&lt;/p&gt;&lt;p&gt;For example, use anti-CSRF packages such as the OWASP CSRFGuard.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Phase: Implementation&lt;/p&gt;&lt;p&gt;Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Phase: Architecture and Design&lt;/p&gt;&lt;p&gt;Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).&lt;/p&gt;&lt;p&gt;Note that this can be bypassed using XSS.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.&lt;/p&gt;&lt;p&gt;Note that this can be bypassed using XSS.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Use the ESAPI Session Management control.&lt;/p&gt;&lt;p&gt;This control includes a component for CSRF.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Do not use the GET method for any request that triggers a state change.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Phase: Implementation&lt;/p&gt;&lt;p&gt;Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.&lt;/p&gt;</solution>
        <otherinfo>&lt;p&gt;No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, anoncsrf, csrf_token] was found in the following HTML form: [Form 1: &quot;edit-keys&quot; &quot;edit-submit-zoeken&quot; ].&lt;/p&gt;</otherinfo>
        <reference>&lt;p&gt;http://projects.webappsec.org/Cross-Site-Request-Forgery&lt;/p&gt;&lt;p&gt;http://cwe.mitre.org/data/definitions/352.html&lt;/p&gt;</reference>
        <cweid>352</cweid>
        <wascid>9</wascid>
        <sourceid>3</sourceid>
    </alertitem>
    <alertitem>
        <pluginid>90033</pluginid>
        <alert>Loosely Scoped Cookie</alert>
        <name>Loosely Scoped Cookie</name>
        <riskcode>0</riskcode>
        <confidence>1</confidence>
        <riskdesc>Informational (Low)</riskdesc>
        <desc>&lt;p&gt;Cookies can be scoped by domain or path. This check is only concerned with domain scope.The domain scope applied to a cookie determines which domains can access it. For example, a cookie can be scoped strictly to a subdomain e.g. www.nottrusted.com, or loosely scoped to a parent domain e.g. nottrusted.com. In the latter case, any subdomain of nottrusted.com can access the cookie. Loosely scoped cookies are common in mega-applications like google.com and live.com. Cookies set from a subdomain like app.foo.bar are transmitted only to that domain by the browser. However, cookies scoped to a parent-level domain may be transmitted to the parent, or any subdomain of the parent.&lt;/p&gt;</desc>
        <instances>
            <instance>
                <uri>http://testsite/user/login</uri>
                <method>POST</method>
            </instance>
            <instance>
                <uri>http://testsite/update.php</uri>
                <method>GET</method>
            </instance>
        </instances>
        <count>2</count>
        <solution>&lt;p&gt;Always scope cookies to a FQDN (Fully Qualified Domain Name).&lt;/p&gt;</solution>
        <otherinfo>&lt;p&gt;The origin domain used for comparison was: &lt;/p&gt;&lt;p&gt;drupal&lt;/p&gt;&lt;p&gt;SESS1a16b869ad6213440f9466338d3066fd=iB6aDHMjHogzZYBkK5sdjmIr_NaVA0DWlvzxfq-ffok&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</otherinfo>
        <reference>&lt;p&gt;https://example2.org</reference>
        <cweid>565</cweid>
        <wascid>15</wascid>
        <sourceid>3</sourceid>
    </alertitem>
    <alertitem>
        <pluginid>10020</pluginid>
        <alert>X-Frame-Options Header Not Set</alert>
        <name>X-Frame-Options Header Not Set</name>
        <riskcode>2</riskcode>
        <confidence>2</confidence>
        <riskdesc>Medium (Medium)</riskdesc>
        <desc>&lt;p&gt;X-Frame-Options header is not included in the HTTP response to protect against &apos;ClickJacking&apos; attacks.&lt;/p&gt;</desc>
        <instances>
            <instance>
                <uri>http://testsite/install.php</uri>
                <method>GET</method>
                <param>X-Frame-Options</param>
            </instance>
            <instance>
                <uri>http://testsite/xmlrpc.php</uri>
                <method>GET</method>
                <param>X-Frame-Options</param>
            </instance>
        </instances>
        <count>2</count>
        <solution>&lt;p&gt;Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it&apos;s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it&apos;s part of a FRAMESET) then you&apos;ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).&lt;/p&gt;</solution>
        <reference>&lt;p&gt;http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx&lt;/p&gt;</reference>
        <cweid>16</cweid>
        <wascid>15</wascid>
        <sourceid>3</sourceid>
    </alertitem>
</alerts></site><site name="http://ocsp.digicert.com" host="ocsp.digicert.com" port="80" ssl="false"><alerts><alertitem>
    <pluginid>10021</pluginid>
    <alert>X-Content-Type-Options Header Missing</alert>
    <name>X-Content-Type-Options Header Missing</name>
    <riskcode>1</riskcode>
    <confidence>2</confidence>
    <riskdesc>Low (Medium)</riskdesc>
    <desc>&lt;p&gt;The Anti-MIME-Sniffing header X-Content-Type-Options was not set to &apos;nosniff&apos;. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.&lt;/p&gt;</desc>
    <instances>
        <instance>
            <uri>http://ocsp.digicert.com/</uri>
            <method>POST</method>
            <param>X-Content-Type-Options</param>
        </instance>
    </instances>
    <count>1</count>
    <solution>&lt;p&gt;Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to &apos;nosniff&apos; for all web pages.&lt;/p&gt;&lt;p&gt;If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.&lt;/p&gt;</solution>
    <otherinfo>&lt;p&gt;This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.&lt;/p&gt;&lt;p&gt;At &quot;High&quot; threshold this scanner will not alert on client or server error responses.&lt;/p&gt;</otherinfo>
    <reference>&lt;p&gt;http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx&lt;/p&gt;&lt;p&gt;https://example2.org</reference>
    <cweid>16</cweid>
    <wascid>15</wascid>
    <sourceid>3</sourceid>
</alertitem>
</alerts></site></OWASPZAPReport>
